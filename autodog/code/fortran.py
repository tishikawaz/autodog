"""This module provides a class `FortranCode` that represents a Fortran
code file. It uses the `FortranAST` class from the `ast.fortran` module
to parse the code and generate an abstract syntax tree. The class
provides methods to convert the tree to a string, write the code to a
file, and insert documentation into the code.
The `insert_docs` method takes a `DocEngine` object and inserts
documentation into the code for each module, function, subroutine, type,
and program node in the tree. The documentation is generated by calling
methods on the `DocEngine` object based on the type of node. If the
`overwrite` parameter is `True`, existing documentation will be
replaced.
The `_insert_docs` method is a private method that is used by
`insert_docs` to dispatch to the appropriate method based on the type of
node. It uses the `singledispatchmethod` decorator to register methods
for each type of node.
"""
from functools import singledispatchmethod
from typing import Optional

from autodog.ast.fortran import (
    FortranAST,
    FunctionNode,
    ModuleNode,
    ProgramNode,
    SubroutineNode,
    TypeNode,
)
from autodog.engine.base import Engine
from autodog.docmodel.base import DocModel
from autodog.utils.progress import progress_bar_nothing


class FortranCode:
    """This is a class `FortranCode` that represents a Fortran code file. It
    has methods to read, write, and modify the code file.

    Attributes
    ----------
        filepath (str): The filepath of the Fortran code file.
        tree (FortranAST): The abstract syntax tree (AST) of the code.

    Methods
    -------
        __init__(self, filepath: str) -> None:
            Initializes the object with the filepath of the Fortran code
            file and creates an abstract syntax tree (AST) of the code using
            the `FortranAST` class.
        to_str(self) -> str:
            Returns the string representation of the AST.
        write(self, filepath='') -> None:
            Writes the modified code to a file. If no filepath is provided,
            it writes to the original file.
        _write_to_original(self) -> None:
            Writes the modified code to the original file.
        insert_docs(self, engine: any, overwrite=False,
        progress_bar=progress_bar_nothing, **kwargs) -> None:
            Inserts documentation into the code using a `DocEngine` object.
        _insert_docs(self, node: any, engine: DocEngine, overwrite: bool) ->
        None:
            Inserts documentation for a given node using the specified
            documentation engine.
    """

    def __init__(self, filepath:str) -> None:
        """The `__init__` method initializes an instance of a class with a
        `filepath` parameter, which is a string representing the path to a
        Fortran file. The method reads the contents of the file using the `open`
        function and creates a `FortranAST` object from the file contents. The
        `FortranAST` object is stored as an attribute of the instance with the
        name `tree`.
        """
        self.filepath = filepath
        with open(filepath) as f:
            self.tree = FortranAST(f.read())

    def to_str(self) -> str:
        """Converts the tree structure to a string representation.

        Returns
        -------
            A string representation of the tree structure.
        """
        return self.tree.to_str()

    def write(self, filepath:Optional[str]=None) -> None:
        """Writes the contents of the current object to a file.

        Args:
        ----
            filepath (str, optional): The path of the file to write to. If not
            provided, the method writes to the original file.

        Returns:
        -------
            None: This method does not return any value.

        Raises:
        ------
            FileNotFoundError: If the specified `filepath` does not exist.

        Note:
        ----
            If `filepath` is an empty string, the method writes to the original
            file.

        Example:
        -------
            obj = MyClass()
            obj.write('output.txt').
        """
        if filepath is None:
            filepath = self.filepath
        with open(filepath, "w") as f:
            f.write(self.to_str())
            return None

    def insert_docs(
        self, engine: any, overwrite=False, progress_bar=progress_bar_nothing, **kwargs,
    ) -> None:
        """Inserts documents into a database engine.

        Args:
        ----
            engine (any): The database engine to insert the documents into.
            overwrite (bool, optional): If True, existing documents will be
            overwritten. Defaults to False.

        Returns:
        -------
            None
        Raises:
            None
        This method iterates over all nodes in a tree and inserts their
        documents into the specified database engine.
        If the `overwrite` parameter is set to True, any existing documents with
        the same ID will be overwritten.
        Otherwise, the documents will be skipped.
        """
        for node in progress_bar(self.tree.walk(), **kwargs):
            self._insert_docs(node, engine, overwrite)

    @singledispatchmethod
    def _insert_docs(self, node:any, engine:Engine, doc_model:DocModel, overwrite:bool) -> None:
        """Inserts documentation for a given node using the specified documentation
        engine.

        Args:
        ----
            node (any): The node for which documentation needs to be inserted.
            engine (DocEngine): The documentation engine to be used for
            inserting documentation.
            overwrite (bool): A flag indicating whether to overwrite existing
            documentation.

        Returns:
        -------
            None.
        """
        raise NotImplementedError(f"FortranCode._insert_docs() for {type(node)} is not implemented.")

    @_insert_docs.register
    def _(self, node:ModuleNode, engine:Engine, doc_model:DocModel, overwrite:bool) -> None:
        """This function is a decorator that registers a function to insert
        documentation into a ModuleNode object.

        Args:
        ----
            node (ModuleNode): A ModuleNode object representing the module to be
            documented.
            engine (DocEngine): A DocEngine object that generates the
            documentation.
            overwrite (bool): A boolean value indicating whether to overwrite
            existing documentation or not.

        Returns:
        -------
            None
        Raises:
            None
        Notes:
            If the module node does not have any documentation or if the
            overwrite parameter is set to True, the function generates
            documentation for the module using the DocEngine object and writes
            it to the module node's doc attribute.
        """
        if not node.doc or overwrite:
            node.write_doc(
                engine.generate_doc(
                    node.to_str(),
                    lang="Fortran",
                    statement_kind="module",
                    doc_format=doc_model.module_format()
                ),
            )

    @_insert_docs.register
    def _(self, node:FunctionNode, engine:Engine, doc_model:DocModel, overwrite:bool) -> None:
        """This function is a decorator that registers a function to insert
        documentation for a given FunctionNode object.

        Parameters
        ----------
        - node: A FunctionNode object that represents the function for which
        documentation is to be generated.
        - engine: A DocEngine object that is used to generate the documentation
        for the function.
        - overwrite: A boolean value that determines whether to overwrite the
        existing documentation for the function or not.
        Description:
        If the function node does not have any documentation or if the overwrite
        parameter is set to True, the function generates the documentation for
        the function using the DocEngine object and writes it to the
        FunctionNode object's doc attribute.
        """
        if not node.doc or overwrite:
            node.write_doc(
                engine.generate_doc(
                    node.to_str(),
                    lang="Fortran",
                    statement_kind="function",
                    doc_format=doc_model.function_format()
                ),
            )

    @_insert_docs.register
    def _(self, node:SubroutineNode, engine:Engine, doc_model:DocModel, overwrite:bool) -> None:
        """This function is a decorator that registers a function to insert
        documentation for a SubroutineNode object.

        Args:
        ----
            node (SubroutineNode): A SubroutineNode object.
            engine (DocEngine): A DocEngine object.
            overwrite (bool): A boolean value indicating whether to overwrite
            existing documentation or not.

        Returns:
        -------
            None
        Description:
            If the node object does not have any documentation or if the
            overwrite parameter is set to True, the function generates
            documentation for the node using the DocEngine object and writes it
            to the node's doc attribute.
        """
        if not node.doc or overwrite:
            node.write_doc(
                engine.generate_doc(
                    node.to_str(),
                    lang="Fortran",
                    statement_kind="subroutine",
                    doc_format=doc_model.function_format()
                ),
            )

    @_insert_docs.register
    def _(self, node:TypeNode, engine:Engine, doc_model:DocModel, overwrite:bool) -> None:
        """This function is a decorator that registers a function to insert
        documentation for a TypeNode object.

        Args:
        ----
            node (TypeNode): A TypeNode object for which documentation needs to
            be inserted.
            engine (DocEngine): A DocEngine object that generates documentation
            for the TypeNode object.
            overwrite (bool): A boolean value that determines whether to
            overwrite existing documentation or not.

        Returns:
        -------
            None
        Raises:
            None
        Notes:
            If the TypeNode object does not have any documentation or if the
            overwrite parameter is set to True, the function generates
            documentation for the TypeNode object using the DocEngine object and
            inserts it into the TypeNode object.
        """
        if not node.doc or overwrite:
            node.write_doc(
                engine.generate_doc(
                    node.to_str(),
                    lang="Fortran",
                    statement_kind="type",
                    doc_format=doc_model.class_format()
                ),
            )

    @_insert_docs.register
    def _(self, node:ProgramNode, engine:Engine, doc_model:DocModel, overwrite:bool) -> None:
        """The following is a suggested docstring for the given Python code:
        ```python
        Registers a function to insert documentation for a ProgramNode object
        into a DocEngine object. If the ProgramNode object does not have
        documentation or the overwrite flag is set to True, the function
        generates documentation using the DocEngine object's generate_code_doc
        method and writes it to the ProgramNode object's doc attribute.

        Args:
        ----
            node (ProgramNode): The ProgramNode object to insert documentation
            for.
            engine (DocEngine): The DocEngine object to use for generating
            documentation.
            overwrite (bool): A flag indicating whether to overwrite existing
            documentation for the ProgramNode object.

        Returns:
        -------
            None.
        """
        if not node.doc or overwrite:
            node.write_doc(
                engine.generate_doc(
                    node.to_str(),
                    lang="Fortran",
                    statement_kind="code",
                    doc_format=doc_model.application_format()
                ),
            )
