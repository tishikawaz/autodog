"""This module provides a class `FortranCode` that represents a Fortran
code file. It uses the `FortranAST` class from the `ast.fortran` module
to parse the code and generate an abstract syntax tree. The class
provides methods to convert the tree to a string, write the code to a
file, and insert documentation into the code.
The `insert_docs` method takes a `DocEngine` object and inserts
documentation into the code for each module, function, subroutine, type,
and program node in the tree. The documentation is generated by calling
methods on the `DocEngine` object based on the type of node. If the
`overwrite` parameter is `True`, existing documentation will be
replaced.
The `_insert_docs` method is a private method that is used by
`insert_docs` to dispatch to the appropriate method based on the type of
node. It uses the `singledispatchmethod` decorator to register methods
for each type of node.
"""
from .ast.fortran import FortranAST, ModuleNode, TypeNode, FunctionNode, SubroutineNode, ProgramNode
from .docengine import DocEngine
from functools import singledispatchmethod

class FortranCode:
    """This is a class `FortranCode` that represents a Fortran code file. It
    has methods to read, write, and modify the code file. The `__init__`
    method initializes the object with the filepath of the Fortran code file
    and creates an abstract syntax tree (AST) of the code using the
    `FortranAST` class. The `to_str` method returns the string
    representation of the AST. The `write` method writes the modified code
    to a file. If no filepath is provided, it writes to the original file.
    The `_write_to_original` method writes the modified code to the original
    file. The `insert_docs` method inserts documentation into the code using
    a `DocEngine` object. The `overwrite` parameter determines whether to
    overwrite existing documentation. The `_insert_docs` method is a private
    method that is used by `insert_docs` to insert documentation into
    different types of nodes in the AST. It is a `singledispatchmethod` that
    is decorated with multiple methods that handle different types of nodes.
    Each method checks if the node has documentation and if not, generates
    documentation using the `DocEngine` object and writes it to the node.
    """

    def __init__(self, filepath: str):
        """The `__init__` method initializes an instance of a class with a
        `filepath` parameter, which is a string representing the path to a
        Fortran file. The method reads the contents of the file using the `open`
        function and creates a `FortranAST` object from the file contents. The
        `FortranAST` object is stored as an attribute of the instance with the
        name `tree`.
        """
        self.filepath = filepath
        with open(filepath, 'r') as f:
            self.tree = FortranAST(f.read())

    def to_str(self) -> str:
        """Converts the tree structure to a string representation.
        Returns:
            A string representation of the tree structure.
        """
        return self.tree.to_str()

    def write(self, filepath='') -> None:
        """The `write` method writes the contents of the current object to a file
        specified by the `filepath` parameter. If `filepath` is an empty string,
        the method writes to the original file. If `filepath` is not empty, the
        method writes to the file specified by `filepath`. The method returns
        `None`.
        """
        if filepath == '':
            return self._write_to_original()
        with open(filepath, 'w') as f:
            f.write(self.to_str())

    def _write_to_original(self) -> None:
        """The `_write_to_original` method writes the string representation of the
        object to the file specified by `self.filepath`. It takes no arguments
        and returns nothing (`None`). The file is opened in write mode (`'w'`)
        and any existing content is overwritten. If the file does not exist, it
        is created.
        """
        with open(self.filepath, 'w') as f:
            f.write(self.to_str())

    def insert_docs(self, engine: any, overwrite=False) -> None:
        """Inserts documents into a database engine.
        Args:
            engine (any): The database engine to insert the documents into.
            overwrite (bool, optional): If True, existing documents will be
            overwritten. Defaults to False.
        Returns:
            None
        Raises:
            None
        This method iterates over all nodes in a tree and inserts their
        documents into the specified database engine. If the `overwrite`
        parameter is set to True, any existing documents with the same ID will
        be overwritten. Otherwise, the documents will be skipped.
        """
        for node in self.tree.walk():
            self._insert_docs(node, engine, overwrite)

    @singledispatchmethod
    def _insert_docs(self, node: any, engine: DocEngine, overwrite: bool) -> None:
        """Inserts documentation for a given node using the specified documentation
        engine.
        Args:
            node (any): The node for which documentation needs to be inserted.
            engine (DocEngine): The documentation engine to be used for
            inserting documentation.
            overwrite (bool): A flag indicating whether to overwrite existing
            documentation.
        Returns:
            None
        """
        pass

    @_insert_docs.register
    def _(self, node: ModuleNode, engine: DocEngine, overwrite: bool) -> None:
        """This function is a decorator that registers a function to insert
        documentation into a ModuleNode object. The function takes in three
        parameters:
        - node: a ModuleNode object representing the module to be documented
        - engine: a DocEngine object that generates the documentation
        - overwrite: a boolean value indicating whether to overwrite existing
        documentation or not
        If the module node does not have any documentation or if the overwrite
        parameter is set to True, the function generates documentation for the
        module using the DocEngine object and writes it to the module node's doc
        attribute.
        """
        if not node.doc or overwrite:
            node.write_doc(engine.generate_module_doc(node.to_str(), lang='Fortran'))

    @_insert_docs.register
    def _(self, node: FunctionNode, engine: DocEngine, overwrite: bool) -> None:
        """This function is a decorator that registers a function to insert
        documentation for a given FunctionNode object. The function takes in
        three parameters:
        - node: A FunctionNode object that represents the function for which
        documentation is to be generated.
        - engine: A DocEngine object that is used to generate the documentation
        for the function.
        - overwrite: A boolean value that determines whether to overwrite the
        existing documentation for the function or not.
        If the function node does not have any documentation or if the overwrite
        parameter is set to True, the function generates the documentation for
        the function using the DocEngine object and writes it to the
        FunctionNode object's doc attribute.
        """
        if not node.doc or overwrite:
            node.write_doc(engine.generate_func_doc(node.to_str(), lang='Fortran'))

    @_insert_docs.register
    def _(self, node: SubroutineNode, engine: DocEngine, overwrite: bool) -> None:
        """This function is a decorator that registers a function to insert
        documentation for a SubroutineNode object. The function takes in three
        parameters:
        - node: a SubroutineNode object
        - engine: a DocEngine object
        - overwrite: a boolean value indicating whether to overwrite existing
        documentation or not.
        If the node object does not have any documentation or if the overwrite
        parameter is set to True, the function generates documentation for the
        node using the DocEngine object and writes it to the node's doc
        attribute.
        """
        if not node.doc or overwrite:
            node.write_doc(engine.generate_func_doc(node.to_str(), lang='Fortran'))

    @_insert_docs.register
    def _(self, node: TypeNode, engine: DocEngine, overwrite: bool) -> None:
        """This function is a decorator that registers a function to insert
        documentation for a TypeNode object. The function takes in three
        parameters:
        - node: a TypeNode object for which documentation needs to be inserted
        - engine: a DocEngine object that generates documentation for the
        TypeNode object
        - overwrite: a boolean value that determines whether to overwrite
        existing documentation or not
        If the TypeNode object does not have any documentation or if the
        overwrite parameter is set to True, the function generates documentation
        for the TypeNode object using the DocEngine object and inserts it into
        the TypeNode object.
        """
        if not node.doc or overwrite:
            node.write_doc(engine.generate_class_doc(node.to_str(), lang='Fortran'))

    @_insert_docs.register
    def _(self, node: ProgramNode, engine: DocEngine, overwrite: bool) -> None:
        """The following is a suggested docstring for the given Python code:
        Registers a function to insert documentation for a ProgramNode object
        into a DocEngine object. If the ProgramNode object does not have
        documentation or the overwrite flag is set to True, the function
        generates documentation using the DocEngine object's generate_code_doc
        method and writes it to the ProgramNode object's doc attribute.
        Args:
            node (ProgramNode): The ProgramNode object to insert documentation
            for.
            engine (DocEngine): The DocEngine object to use for generating
            documentation.
            overwrite (bool): A flag indicating whether to overwrite existing
            documentation for the ProgramNode object.
        Returns:
            None
        """
        if not node.doc or overwrite:
            node.write_doc(engine.generate_code_doc(node.to_str(), lang='Fortran'))